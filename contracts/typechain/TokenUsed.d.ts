/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TokenUsedInterface extends ethers.utils.Interface {
  functions: {
    "getData(uint8,uint16)": FunctionFragment;
    "isUsed(uint16)": FunctionFragment;
    "setData(uint16,uint8[])": FunctionFragment;
    "setUsed(uint16)": FunctionFragment;
    "setUsedFromAndLength(uint16,uint16)": FunctionFragment;
    "tokenData(uint16)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getData",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isUsed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setData",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsedFromAndLength",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenData",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUsed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUsed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUsedFromAndLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenData", data: BytesLike): Result;

  events: {};
}

export class TokenUsed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TokenUsedInterface;

  functions: {
    getData(
      _page: BigNumberish,
      _perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    isUsed(
      _position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    setData(
      _index: BigNumberish,
      _data: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUsed(
      _position: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUsedFromAndLength(
      _start: BigNumberish,
      _len: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenData(arg0: BigNumberish, overrides?: CallOverrides): Promise<[number]>;
  };

  getData(
    _page: BigNumberish,
    _perPage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number[]>;

  isUsed(_position: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  setData(
    _index: BigNumberish,
    _data: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUsed(
    _position: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUsedFromAndLength(
    _start: BigNumberish,
    _len: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenData(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  callStatic: {
    getData(
      _page: BigNumberish,
      _perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number[]>;

    isUsed(
      _position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setData(
      _index: BigNumberish,
      _data: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setUsed(_position: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setUsedFromAndLength(
      _start: BigNumberish,
      _len: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenData(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    getData(
      _page: BigNumberish,
      _perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUsed(
      _position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setData(
      _index: BigNumberish,
      _data: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUsed(
      _position: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUsedFromAndLength(
      _start: BigNumberish,
      _len: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getData(
      _page: BigNumberish,
      _perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUsed(
      _position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setData(
      _index: BigNumberish,
      _data: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUsed(
      _position: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUsedFromAndLength(
      _start: BigNumberish,
      _len: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
